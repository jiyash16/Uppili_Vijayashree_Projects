/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PatientSupport;

import Business.Enterprise.Enterprise;
import Business.Organization.BillingOrganization;
import Business.Organization.ITOrganization;
import Business.Organization.Organization;
import Business.Organization.PolicyOrganization;
import Business.Organization.SupportOrganization;
import Business.UserAccount.UserAccount;
import Business.Validate;
import Business.WorkQueue.SupportWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jiya
 */
public class ServeSuportWorkRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ServeITWorkRequestJPanel
     */
    JPanel userProcessContainer;
    SupportOrganization organization;
    Enterprise enterprise;
    SimpleDateFormat sdf;
    UserAccount userAccount;
    int wfh;
    public ServeSuportWorkRequestJPanel(JPanel userProcessContainer,SupportOrganization organization,Enterprise enterprise,UserAccount userAccount,int wfh) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization=organization; 
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.wfh=wfh;
        //System.out.println("org size"+enterprise);
        sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss a");
         populateTable();
    }
    public void populateTable()
    {
        DefaultTableModel model = (DefaultTableModel) tblPatientSupport.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
           
            Object[] row = new Object[8];
            row[1] = request.getTicketNumber();
            row[2] = request;
            row[3] = ((SupportWorkRequest) request).getSender() == null? null :((SupportWorkRequest) request).getSender().getPatient();
            row[4] = sdf.format(request.getRequestDate());
            row[5] = request.getStatus();
            row[6] = ((SupportWorkRequest) request).getOrganization() == null? null :((SupportWorkRequest) request).getOrganization();
           row[7] = ((SupportWorkRequest) request).getAssignedby() == null? null :((SupportWorkRequest) request).getAssignedby();
           
           
            model.addRow(row);
           
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        lblswan = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatientSupport = new javax.swing.JTable();
        btnAssignToIT = new javax.swing.JButton();
        btnAssignToBilling = new javax.swing.JButton();
        btnAssignToPolicy = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Back.png"))); // NOI18N
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 50, 40));

        lblswan.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblswan.setForeground(new java.awt.Color(255, 255, 255));
        lblswan.setText("Tickets");
        add(lblswan, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, 230, 50));

        tblPatientSupport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Action", "Ticket Number", "Message", "Sender", "Requested Date", "Status", "Assigned Organization", "Assigned By"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatientSupport);
        if (tblPatientSupport.getColumnModel().getColumnCount() > 0) {
            tblPatientSupport.getColumnModel().getColumn(0).setPreferredWidth(5);
            tblPatientSupport.getColumnModel().getColumn(1).setPreferredWidth(10);
            tblPatientSupport.getColumnModel().getColumn(3).setPreferredWidth(15);
            tblPatientSupport.getColumnModel().getColumn(5).setPreferredWidth(20);
            tblPatientSupport.getColumnModel().getColumn(6).setPreferredWidth(50);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 1030, 260));

        btnAssignToIT.setBackground(new java.awt.Color(255, 102, 102));
        btnAssignToIT.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAssignToIT.setForeground(new java.awt.Color(255, 255, 255));
        btnAssignToIT.setText("Assign to IT Organization");
        btnAssignToIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignToITActionPerformed(evt);
            }
        });
        add(btnAssignToIT, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, 280, -1));

        btnAssignToBilling.setBackground(new java.awt.Color(255, 102, 102));
        btnAssignToBilling.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAssignToBilling.setForeground(new java.awt.Color(255, 255, 255));
        btnAssignToBilling.setText("Assign to Billing Organization");
        btnAssignToBilling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignToBillingActionPerformed(evt);
            }
        });
        add(btnAssignToBilling, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 370, 280, -1));

        btnAssignToPolicy.setBackground(new java.awt.Color(255, 102, 102));
        btnAssignToPolicy.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAssignToPolicy.setForeground(new java.awt.Color(255, 255, 255));
        btnAssignToPolicy.setText("Assign to Policy Organization");
        btnAssignToPolicy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignToPolicyActionPerformed(evt);
            }
        });
        add(btnAssignToPolicy, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 370, 280, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout cl = (CardLayout) userProcessContainer.getLayout();
        cl.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAssignToITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignToITActionPerformed
        // TODO add your handling code here:
        
          DefaultTableModel dtm = (DefaultTableModel) tblPatientSupport.getModel();
        int rowcount = dtm.getRowCount();
      //  System.out.println("rowcount"+rowcount);
        try
        {
        boolean assigned = false;
        for(int i = 0; i < rowcount ; i++)
        {
             assigned = false;
            WorkRequest wr =(WorkRequest) tblPatientSupport.getValueAt(i, 2);
             //Component c = tblAdminWorkrequest.findComponentAt(i, 1);
             String status = (String)tblPatientSupport.getValueAt(i, 5);
             Object chkbox = tblPatientSupport.getValueAt(i, 0);
             if(status.equalsIgnoreCase("Open") || status.equalsIgnoreCase("Returned"))
             {
            if(chkbox != null && chkbox.equals(true) )
            {
                
                if(wr instanceof SupportWorkRequest)
                {
                   
                    for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList())
                    {
                        
                        if(org instanceof ITOrganization)
                        {
                            if(status.equalsIgnoreCase("Returned"))
                            {
                                ((SupportWorkRequest) wr).setEmployeeReceiver(null);
                            }
                            wr.setStatus("Pending Request");
                            ((SupportWorkRequest) wr).setOrganization("IT");
                            ((SupportWorkRequest) wr).setAssignedby(userAccount);
                            
                            org.getWorkQueue().getWorkRequestList().add(wr);
                            userAccount.getWorkQueue().getWorkRequestList().add(wr);
                             if(wfh==1)
                            {
                                Validate.createLogFile(userAccount.getUsername(), "Employee assigned workrequest to IT");
                            }
                        }
                    } 
                   //  tblAdminWorkrequest.setCellSelectionEnabled(false);
                    
                    // c.setEnabled(false);
        }
            }
             
    
             }
        }
         
                populateTable();
        }
        catch(Exception exp)
         {
                
         }
        
        
    }//GEN-LAST:event_btnAssignToITActionPerformed

    private void btnAssignToBillingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignToBillingActionPerformed
        // TODO add your handling code here:
          DefaultTableModel dtm = (DefaultTableModel) tblPatientSupport.getModel();
        int rowcount = dtm.getRowCount();
       // System.out.println("rowcount"+rowcount);
        try
        {
        
        for(int i = 0; i < rowcount ; i++)
        {
             
            
            WorkRequest wr =(WorkRequest) tblPatientSupport.getValueAt(i, 2);
             //Component c = tblAdminWorkrequest.findComponentAt(i, 1);
             String status = (String)tblPatientSupport.getValueAt(i, 5);
             Object chkbox = tblPatientSupport.getValueAt(i, 0);
            if(status.equalsIgnoreCase("Open") || status.equalsIgnoreCase("Returned"))
             { 
            if(chkbox != null && chkbox.equals(true))
            {
                if(wr instanceof SupportWorkRequest)
                {
                    for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList())
                    {
                        if(org instanceof BillingOrganization)
                        {
                             if(status.equalsIgnoreCase("Returned"))
                            {
                                ((SupportWorkRequest) wr).setEmployeeReceiver(null);
                            }
                            wr.setStatus("Pending Request");
                            ((SupportWorkRequest) wr).setOrganization("Billing");
                            ((SupportWorkRequest) wr).setAssignedby(userAccount);
                            
                            org.getWorkQueue().getWorkRequestList().add(wr);
                            userAccount.getWorkQueue().getWorkRequestList().add(wr);
                             if(wfh==1)
                            {
                                Validate.createLogFile(userAccount.getUsername(), "Employee assigned workrequest to Billing");
                            }
                        }
                    } 
                   //  tblAdminWorkrequest.setCellSelectionEnabled(false);
                    
                    // c.setEnabled(false);
                     
                }
            }
             
    
             }
        }
         
                populateTable();
        }
        catch(Exception exp)
         {
                
         }
        
       
    }//GEN-LAST:event_btnAssignToBillingActionPerformed

    private void btnAssignToPolicyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignToPolicyActionPerformed
        // TODO add your handling code here:
          DefaultTableModel dtm = (DefaultTableModel) tblPatientSupport.getModel();
        int rowcount = dtm.getRowCount();
      //  System.out.println("rowcount"+rowcount);
        try
        {
       
        for(int i = 0; i < rowcount ; i++)
        {
             
            WorkRequest wr =(WorkRequest) tblPatientSupport.getValueAt(i, 2);
             //Component c = tblAdminWorkrequest.findComponentAt(i, 1);
             String status = (String)tblPatientSupport.getValueAt(i, 5);
             Object chkbox = tblPatientSupport.getValueAt(i, 0);
             if(status.equalsIgnoreCase("Open") || status.equalsIgnoreCase("Returned"))
             {
            if(chkbox != null && chkbox.equals(true))
            {
                if(wr instanceof SupportWorkRequest)
                {
                    for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList())
                    {
                        if(org instanceof PolicyOrganization)
                        {
                             if(status.equalsIgnoreCase("Returned"))
                            {
                                ((SupportWorkRequest) wr).setEmployeeReceiver(null);
                            }
                            wr.setStatus("Pending Request");
                            ((SupportWorkRequest) wr).setOrganization("Policy");
                            ((SupportWorkRequest) wr).setAssignedby(userAccount);
                             if(wfh==1)
                            {
                                Validate.createLogFile(userAccount.getUsername(), "Employee assigned workrequest to policy");
                            }
                            org.getWorkQueue().getWorkRequestList().add(wr);
                            userAccount.getWorkQueue().getWorkRequestList().add(wr);
                        }
                    } 
                   //  tblAdminWorkrequest.setCellSelectionEnabled(false);
                    
                    // c.setEnabled(false);
                     
                }
             }
             }
            
         
        }
        
          
                populateTable();
       
             
        
        }
        catch(Exception exp)
         {
                
         }
        
        
    }//GEN-LAST:event_btnAssignToPolicyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignToBilling;
    private javax.swing.JButton btnAssignToIT;
    private javax.swing.JButton btnAssignToPolicy;
    private javax.swing.JButton btnBack;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblswan;
    private javax.swing.JTable tblPatientSupport;
    // End of variables declaration//GEN-END:variables
}
