/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.OrganizationAdmin;


import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Person.Employee;
import Business.Person.Patient;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import Business.Validate;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jiya
 */
public class ManageUserAccountAdminJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageUserAccountJPanel
     */
    JPanel userProcessContainer;
    Enterprise enterprise;
    EcoSystem system;
    public ManageUserAccountAdminJPanel(JPanel userProcessContainer, Enterprise enterprise, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.system = system;
        AddUserAccountJPanel.setVisible(false);
        populateTable();
        populateOrganizationComboBox();
    }
   public void populateOrganizationComboBox() {
        cmbOrganization.removeAllItems();
        
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if(organization instanceof PatientOrganization)
            {
                cmbOrganization.addItem(organization);
            }
        }
    }
    
    public void populatePersonComboBox(Organization organization){
        cmbPerson.removeAllItems();
        if(organization instanceof PatientOrganization)
        {
             for (Patient patient : organization.getPatientDirectory().getpatientList()){
                 if(patient.isStatus())
                 {
                    cmbPerson.addItem(patient);
                 }
             }
        }
        
        
    }
    
    private void populateRoleComboBox(Organization organization){
        cmbRole.removeAllItems();
        for (Role role : organization.getSupportedRole()){
            cmbRole.addItem(role);
        }
    }

    public void populateTable() {

        DefaultTableModel model = (DefaultTableModel) tblUserAccount.getModel();

        model.setRowCount(0);

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
           if(organization instanceof PatientOrganization)
           {
             for (UserAccount ua : organization.getUserAccountDirectory().getUserAccountDirectory()) {
                Object row[] = new Object[4];
                
                row[0] = organization;
                row[1] = ua;
                row[2] = ua.getRole();
                if(ua.isStatus())
                {
                    row[3]= "Active";
                }
                else
                {
                    row[3] = "InActive";
                }
                model.addRow(row);
              }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        lblswan = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUserAccount = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        btnview = new javax.swing.JButton();
        AddUserAccountJPanel = new javax.swing.JPanel();
        lblUserAccount = new javax.swing.JLabel();
        lblNetworkName = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnUpdateSave = new javax.swing.JButton();
        cmbOrganization = new javax.swing.JComboBox();
        lblNetworkName1 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblNetworkName2 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        cmbPerson = new javax.swing.JComboBox();
        lblEmployee = new javax.swing.JLabel();
        cmbRole = new javax.swing.JComboBox();
        lblRole = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Back.png"))); // NOI18N
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 50, 40));

        lblswan.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblswan.setForeground(new java.awt.Color(255, 255, 255));
        lblswan.setText("Manage UserAccount");
        add(lblswan, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, 230, 50));

        tblUserAccount.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Organization", "UserName", "Role", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblUserAccount);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(32, 70, 610, 100));

        btnDelete.setBackground(new java.awt.Color(255, 102, 102));
        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Enable/Disable User");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 180, 160, -1));

        btnview.setBackground(new java.awt.Color(255, 102, 102));
        btnview.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnview.setForeground(new java.awt.Color(255, 255, 255));
        btnview.setText("View User Details");
        btnview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnviewActionPerformed(evt);
            }
        });
        add(btnview, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 230, 180, -1));

        AddUserAccountJPanel.setOpaque(false);
        AddUserAccountJPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblUserAccount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblUserAccount.setForeground(new java.awt.Color(255, 255, 255));
        lblUserAccount.setText("User Details");
        AddUserAccountJPanel.add(lblUserAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 20, 110, 30));

        lblNetworkName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblNetworkName.setForeground(new java.awt.Color(255, 255, 255));
        lblNetworkName.setText("<html>Organization Name <font color = red>*</font></html>");
        AddUserAccountJPanel.add(lblNetworkName, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, -1, -1));

        btnSave.setBackground(new java.awt.Color(255, 102, 102));
        btnSave.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        AddUserAccountJPanel.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 160, -1, -1));

        btnUpdate.setBackground(new java.awt.Color(255, 102, 102));
        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Edit");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        AddUserAccountJPanel.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 140, 60, -1));

        btnUpdateSave.setBackground(new java.awt.Color(255, 102, 102));
        btnUpdateSave.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUpdateSave.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateSave.setText("Save");
        btnUpdateSave.setEnabled(false);
        btnUpdateSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateSaveActionPerformed(evt);
            }
        });
        AddUserAccountJPanel.add(btnUpdateSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 190, -1, -1));

        cmbOrganization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrganizationActionPerformed(evt);
            }
        });
        AddUserAccountJPanel.add(cmbOrganization, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 90, 160, 30));

        lblNetworkName1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblNetworkName1.setForeground(new java.awt.Color(255, 255, 255));
        lblNetworkName1.setText("<html>User Name <font color = red>*</font></html>");
        AddUserAccountJPanel.add(lblNetworkName1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, -1, 30));
        AddUserAccountJPanel.add(txtUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 210, 160, 30));

        lblNetworkName2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblNetworkName2.setForeground(new java.awt.Color(255, 255, 255));
        lblNetworkName2.setText("<html>Password <font color = red>*</font></html>");
        AddUserAccountJPanel.add(lblNetworkName2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, -1, 30));

        txtPassword.setEnabled(false);
        AddUserAccountJPanel.add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 250, 160, 30));

        cmbPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPersonActionPerformed(evt);
            }
        });
        AddUserAccountJPanel.add(cmbPerson, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, 160, 30));

        lblEmployee.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblEmployee.setForeground(new java.awt.Color(255, 255, 255));
        lblEmployee.setText("<html>Person Name <font color = red>*</font></html>");
        AddUserAccountJPanel.add(lblEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, -1, -1));

        cmbRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbRoleActionPerformed(evt);
            }
        });
        AddUserAccountJPanel.add(cmbRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 170, 160, 30));

        lblRole.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblRole.setForeground(new java.awt.Color(255, 255, 255));
        lblRole.setText("<html>Role <font color = red>*</font></html>");
        AddUserAccountJPanel.add(lblRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, -1, -1));

        add(AddUserAccountJPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 300, 510, 370));

        btnAdd.setBackground(new java.awt.Color(255, 102, 102));
        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Add User");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, 180, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedrow = tblUserAccount.getSelectedRow();
        if(selectedrow < 0)
        {
            JOptionPane.showMessageDialog(null,"Please select any row to edit","Information",JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        UserAccount ua = (UserAccount) tblUserAccount.getValueAt(selectedrow, 1);
        Organization org = (Organization) tblUserAccount.getValueAt(selectedrow, 0);
        if(ua.isStatus())
        {
            if(org instanceof PatientOrganization)
            {
                ua.getPatient().setStatus(false);
                ua.setStatus(false);
               
            }
             JOptionPane.showMessageDialog(null,"UserAccount disabled successfully","Success",JOptionPane.INFORMATION_MESSAGE);
        }
        else
        {
            if(org instanceof PatientOrganization)
            {
                ua.getPatient().setStatus(true);
                ua.setStatus(true);
            }
            
            JOptionPane.showMessageDialog(null,"UserAccount enabled successfully","Success",JOptionPane.INFORMATION_MESSAGE);
        }
        populateTable();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnviewActionPerformed
        // TODO add your handling code here:

        int selectedrow = tblUserAccount.getSelectedRow();
        if(selectedrow < 0)
        {
            JOptionPane.showMessageDialog(null,"Please select any row to edit","Information",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Organization org = (Organization) tblUserAccount.getValueAt(selectedrow, 0);
        System.out.println("org name" + org.getName());
        UserAccount ua = (UserAccount) tblUserAccount.getValueAt(selectedrow, 1);
         Role role = (Role) tblUserAccount.getValueAt(selectedrow, 2);
         System.out.println("role" + role.toString());

        AddUserAccountJPanel.setVisible(true);
       
        txtPassword.setEnabled(false);
        txtPassword.setText(ua.getPassword());
        txtUsername.setEnabled(false);
        txtUsername.setText(ua.getUsername());
        cmbOrganization.setSelectedItem(org);
        cmbOrganization.setEnabled(false);
        cmbRole.setSelectedItem(role);
        cmbRole.setEnabled(false);
        cmbPerson.setEnabled(false);
         if(org instanceof PatientOrganization)
         {
            cmbPerson.setSelectedItem(ua.getPatient());
            
        }
       
        btnUpdate.setVisible(true);
        btnUpdate.setEnabled(true);
        btnSave.setVisible(false);
        btnUpdateSave.setVisible(true);
        btnUpdateSave.setEnabled(false);
    }//GEN-LAST:event_btnviewActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        //btnUpdate.setVisible(false);
        //Date date = new Date();
        String userName = txtUsername.getText().trim();
        String password = txtPassword.getText().trim();
        
        boolean booluserName = Validate.isalphanumeric(userName);
       
          boolean uidpresent=false;
        UserAccount userAccount = system.getUserAccountDirectory().searchUserAccountpresent(userName);
        Enterprise inEnterprise = null;
        Organization inOrganization = null;
        if (userAccount == null) {
            //Step2: Go inside each network to check each enterprise
            for (Network network : system.getNetworkList()) {
                //Step 2-a: Check against each enterprise
                
                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                    userAccount = enterprise.getUserAccountDirectory().searchUserAccountpresent(userName);
                    if (userAccount == null) {
                        //Step3: Check against each organization inside that enterprise
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            userAccount = organization.getUserAccountDirectory().searchUserAccountpresent(userName);
                            if (userAccount != null) {
                                inEnterprise = enterprise;
                                inOrganization = organization;
                               // this.organization = organization;
                                break;
                            }
                        }
                    } else {
                        inEnterprise = enterprise;
                        break;
                    }
                    if (inOrganization != null) {
                        break;
                    }
                }
                if (inEnterprise != null) {
                    break;
                }
            }
        }

        if (userAccount == null) {
           uidpresent = true;
          
        }
        if(!userName.isEmpty() && cmbPerson.getSelectedItem() != null && cmbOrganization.getSelectedItem() != null && cmbRole.getSelectedItem() !=null)
        {
            if(booluserName )
            {
                if(uidpresent)
                {
                    Organization org = (Organization) cmbOrganization.getSelectedItem();
                    Role role = (Role) cmbRole.getSelectedItem();
                    if(org instanceof PatientOrganization)
                    {
                        Patient patient = (Patient) cmbPerson.getSelectedItem();
                        txtUsername.setBackground(Color.WHITE);

                        System.out.println("Temporary userid and Password for "+ patient.getFirstName()  + " is :["+userName +"], [ "+password + "]");
                         UserAccount account = org.getUserAccountDirectory().createUserAccountPatient(userName, password, patient, role);

                        JOptionPane.showMessageDialog(null,"User Account created succesfully","Success",JOptionPane.INFORMATION_MESSAGE);
                        txtUsername.setText("");
                        txtPassword.setText("");

                        populateTable();
                        AddUserAccountJPanel.setVisible(false);
                        
                    }
                    
                }
                else
                {
                    JOptionPane.showMessageDialog(null,"User id already exist","Information",JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            }
            else
            {
                if(!booluserName)
                {
                    txtUsername.setBackground(Color.red);

                }
               
                JOptionPane.showMessageDialog(null,"Invalid data","Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Fields cannot be empty","Information",JOptionPane.INFORMATION_MESSAGE);

        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        btnUpdateSave.setEnabled(true);
        btnUpdate.setEnabled(false);
        txtUsername.setEnabled(false);
        txtPassword.setEnabled(true);
        cmbPerson.setEnabled(false);
        cmbRole.setEnabled(false);
        cmbOrganization.setEnabled(false);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnUpdateSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateSaveActionPerformed
        // TODO add your handling code here:
        int selectedrow = tblUserAccount.getSelectedRow();
         
        String password = txtPassword.getText().trim();
        
        
       boolean boolpassword = Validate.isalphanumeric(password);
       
        if(!password.isEmpty() && cmbPerson.getSelectedItem() != null && cmbOrganization.getSelectedItem() != null && cmbRole.getSelectedItem() !=null)
        {
            if(boolpassword )
            {
               
                                            
                        txtUsername.setBackground(Color.WHITE);
                        txtPassword.setBackground(Color.WHITE);
                        
                         UserAccount account = (UserAccount) tblUserAccount.getValueAt(selectedrow, 1);
                         
                         account.setPassword(password);
                        JOptionPane.showMessageDialog(null,"User Account created succesfully","Success",JOptionPane.INFORMATION_MESSAGE);
                        txtUsername.setText("");
                        txtPassword.setText("");

                        populateTable();
                        AddUserAccountJPanel.setVisible(false);
                        
                    
                
               
            }
            else
            {
                
                JOptionPane.showMessageDialog(null,"Invalid data","Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Fields cannot be empty","Information",JOptionPane.INFORMATION_MESSAGE);

        }
    }//GEN-LAST:event_btnUpdateSaveActionPerformed

    private void cmbOrganizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrganizationActionPerformed
        // TODO add your handling code here:
         Organization organization = (Organization) cmbOrganization.getSelectedItem();
        if (organization != null){
            populatePersonComboBox(organization);
            populateRoleComboBox(organization);
        }

    }//GEN-LAST:event_cmbOrganizationActionPerformed

    private void cmbPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPersonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbPersonActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        AddUserAccountJPanel.setVisible(true);
        btnSave.setVisible(true);
        btnUpdate.setVisible(false);
        btnUpdateSave.setVisible(false);
        populateOrganizationComboBox();
        cmbOrganization.setEnabled(true);
        cmbPerson.setEnabled(true);
        cmbRole.setEnabled(true);
        txtUsername.setText("");
        txtUsername.setEnabled(true);
        txtPassword.setEnabled(false);
        txtPassword.setText(generatepassword());
    }//GEN-LAST:event_btnAddActionPerformed
private String generatepassword()
    {
        //String from which characters are picked up by randomizer
         String randomString="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
         Random random=new Random();
        StringBuilder password =new StringBuilder();
        //for loop to generate Id of length of 5
        for (int loop_var = 0; loop_var < 5; loop_var++) 
        {
            int randIndex1=random.nextInt(randomString.length());
            password.append(randomString.charAt(randIndex1));            
        }
        return password.toString();

    }
    private void cmbRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbRoleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbRoleActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddUserAccountJPanel;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdateSave;
    private javax.swing.JButton btnview;
    private javax.swing.JComboBox cmbOrganization;
    private javax.swing.JComboBox cmbPerson;
    private javax.swing.JComboBox cmbRole;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEmployee;
    private javax.swing.JLabel lblNetworkName;
    private javax.swing.JLabel lblNetworkName1;
    private javax.swing.JLabel lblNetworkName2;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblUserAccount;
    private javax.swing.JLabel lblswan;
    private javax.swing.JTable tblUserAccount;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
