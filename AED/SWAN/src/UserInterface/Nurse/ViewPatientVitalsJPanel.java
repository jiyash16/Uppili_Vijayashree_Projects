/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Nurse;


import Business.Person.Patient;
import Business.Validate;
import Business.Vitals.Vital;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Jiya
 */
public class ViewPatientVitalsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewPatientProfileJPanel
     */
    JPanel userProcessContainer;
  Patient patient;
  SimpleDateFormat sdf,sdfdob;
    public ViewPatientVitalsJPanel(JPanel userProcessContainer,Patient patient) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.patient = patient;
        sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss a");
        sdfdob = new SimpleDateFormat("dd/MM/yyyy");
       AddVitalPanel.setVisible(false);
       VitalJPanel.setVisible(false);
        populateTable();
        
    }
   
    public void populateTable()
    {
        DefaultTableModel dtm = (DefaultTableModel) tblVitalHistory.getModel();
        dtm.setRowCount(0);
        for(Vital v: patient.getVitalSignHistory().getVitalSignHistory())
        {
            Object row[] = new Object[2];
            row[0] = sdf.format(v.getCurrDate());
            row[1] = v;
            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblVitalHistory = new javax.swing.JTable();
        btnViewReport = new javax.swing.JButton();
        btnAddVitals = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnBack1 = new javax.swing.JButton();
        lblVitalDetails = new javax.swing.JLabel();
        AddVitalPanel = new javax.swing.JPanel();
        lblAddOrganization2 = new javax.swing.JLabel();
        btnSave2 = new javax.swing.JButton();
        lblRespRate = new javax.swing.JLabel();
        lblHeartRate = new javax.swing.JLabel();
        lblBP = new javax.swing.JLabel();
        lblWeight = new javax.swing.JLabel();
        lblPounds = new javax.swing.JLabel();
        txtRespRate = new javax.swing.JTextField();
        txtBP = new javax.swing.JTextField();
        txtHeartRate = new javax.swing.JTextField();
        txtWeight = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        VitalJPanel = new javax.swing.JPanel();

        setBackground(new java.awt.Color(0, 153, 153));
        setEnabled(false);
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblVitalHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Report Date", "Report Status"
            }
        ));
        jScrollPane1.setViewportView(tblVitalHistory);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, -1, 120));

        btnViewReport.setBackground(new java.awt.Color(255, 102, 102));
        btnViewReport.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnViewReport.setForeground(new java.awt.Color(255, 255, 255));
        btnViewReport.setText("View Vital Detail");
        btnViewReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewReportActionPerformed(evt);
            }
        });
        add(btnViewReport, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 230, -1, -1));

        btnAddVitals.setBackground(new java.awt.Color(255, 102, 102));
        btnAddVitals.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAddVitals.setForeground(new java.awt.Color(255, 255, 255));
        btnAddVitals.setText("Add Vitals");
        btnAddVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVitalsActionPerformed(evt);
            }
        });
        add(btnAddVitals, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 200, -1, -1));

        btnDelete.setBackground(new java.awt.Color(255, 102, 102));
        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete Vital");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 200, -1, -1));

        btnBack1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Back.png"))); // NOI18N
        btnBack1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBack1ActionPerformed(evt);
            }
        });
        add(btnBack1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 50, 40));

        lblVitalDetails.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblVitalDetails.setForeground(new java.awt.Color(255, 255, 255));
        lblVitalDetails.setText("Patient Vital");
        add(lblVitalDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 230, 50));

        AddVitalPanel.setOpaque(false);
        AddVitalPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblAddOrganization2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblAddOrganization2.setForeground(new java.awt.Color(255, 255, 255));
        lblAddOrganization2.setText("Vital Details");
        AddVitalPanel.add(lblAddOrganization2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 140, -1));

        btnSave2.setBackground(new java.awt.Color(255, 102, 102));
        btnSave2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSave2.setForeground(new java.awt.Color(255, 255, 255));
        btnSave2.setText("Save");
        btnSave2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSave2ActionPerformed(evt);
            }
        });
        AddVitalPanel.add(btnSave2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 150, -1, -1));

        lblRespRate.setForeground(new java.awt.Color(255, 255, 255));
        lblRespRate.setText("Respiratory Rate");
        AddVitalPanel.add(lblRespRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 110, 10));

        lblHeartRate.setForeground(new java.awt.Color(255, 255, 255));
        lblHeartRate.setText("Heart Rate");
        AddVitalPanel.add(lblHeartRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, 80, 10));

        lblBP.setForeground(new java.awt.Color(255, 255, 255));
        lblBP.setText("Systolic Blood Pressure");
        AddVitalPanel.add(lblBP, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 140, 10));

        lblWeight.setForeground(new java.awt.Color(255, 255, 255));
        lblWeight.setText("Weight");
        AddVitalPanel.add(lblWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 250, 60, 10));

        lblPounds.setForeground(new java.awt.Color(255, 255, 255));
        lblPounds.setText("Pounds");
        AddVitalPanel.add(lblPounds, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 250, 60, 10));

        txtRespRate.setEnabled(false);
        AddVitalPanel.add(txtRespRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 140, 30));

        txtBP.setEnabled(false);
        AddVitalPanel.add(txtBP, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 140, 140, 30));

        txtHeartRate.setEnabled(false);
        AddVitalPanel.add(txtHeartRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 190, 140, 30));

        txtWeight.setEnabled(false);
        AddVitalPanel.add(txtWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 240, 140, 30));

        btnUpdate.setBackground(new java.awt.Color(255, 102, 102));
        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Edit");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        AddVitalPanel.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 120, -1, -1));

        btnSave.setBackground(new java.awt.Color(255, 102, 102));
        btnSave.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Save");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        AddVitalPanel.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 180, -1, -1));

        add(AddVitalPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 270, 510, 340));

        VitalJPanel.setOpaque(false);
        VitalJPanel.setLayout(new java.awt.BorderLayout());
        add(VitalJPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 270, 480, 340));
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewReportActionPerformed
        //View vital history retrive Vital details of selected row in JTable
        int selectedRow = tblVitalHistory.getSelectedRow();
        if(selectedRow < 0)
        {
            JOptionPane.showMessageDialog(null,"Select any row","Warning",1);
            return;
        }
      
            Vital vital = (Vital)tblVitalHistory.getValueAt(selectedRow,1);
      AddVitalPanel.setVisible(true);
      VitalJPanel.setVisible(true);
      txtBP.setEnabled(false);
      txtHeartRate.setEnabled(false);
      txtRespRate.setEnabled(false);
      
      txtWeight.setEnabled(false);
      btnSave.setVisible(true);
      btnUpdate.setVisible(true);
      btnSave2.setVisible(false);
      txtBP.setText(String.valueOf(vital.getSysBP()));
      txtHeartRate.setText(String.valueOf(vital.getHeartRate()));
      txtRespRate.setText(String.valueOf(vital.getRespRate()));
      txtWeight.setText(String.valueOf(vital.getWeight()));
      populateChart(vital);
      
    }//GEN-LAST:event_btnViewReportActionPerformed

    public void populateChart(Vital v)
    {
        DefaultCategoryDataset bChart;
         bChart = new DefaultCategoryDataset();
          bChart.setValue(v.getSysBP(), "Vital Sign", "BP");
            bChart.setValue(v.getHeartRate(), "Vital Sign", "Heart Rate" );
            bChart.setValue(v.getRespRate(), "Vital Sign", "Resp Rate");
            bChart.setValue(v.getWeight(), "Vital Sign", "Weight");
             JFreeChart barChart = ChartFactory.createBarChart("Vital Signs","","", bChart,PlotOrientation.VERTICAL,true,true,false);
        CategoryPlot catChart = barChart.getCategoryPlot();
        BarRenderer b = (BarRenderer)catChart.getRenderer();
        b.setMaximumBarWidth(0.10);
        
        catChart.setRangeGridlinePaint(Color.WHITE);
        ChartPanel barPanel = new ChartPanel(barChart);
        
        VitalJPanel.removeAll();
        VitalJPanel.add(barPanel,BorderLayout.CENTER);
        VitalJPanel.validate();
        
        
    }
    private void btnAddVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVitalsActionPerformed
        // TODO add your handling code here:
        
        AddVitalPanel.setVisible(true);
        VitalJPanel.setVisible(false);
        btnSave2.setVisible(true);
        btnSave.setVisible(false);
        btnUpdate.setVisible(false);
        txtBP.setEnabled(true);
        txtHeartRate.setEnabled(true);
        txtRespRate.setEnabled(true);
        txtWeight.setEnabled(true);
        txtBP.setText("");
        txtHeartRate.setText("");
        txtRespRate.setText("");
        txtWeight.setText("");
    }//GEN-LAST:event_btnAddVitalsActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedrow = tblVitalHistory.getSelectedRow();
        if(selectedrow <0)
        {
            JOptionPane.showMessageDialog(null,"Please select row","Warning",1);
            return;
        }
        Vital vital = (Vital)tblVitalHistory.getValueAt(selectedrow, 1);
        patient.getVitalSignHistory().deleteVital(vital);
        JOptionPane.showMessageDialog(null,"Vitals deleted Successfully","Success",1);
        populateTable();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnBack1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBack1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout cl = (CardLayout) userProcessContainer.getLayout();
        cl.previous(userProcessContainer);
    }//GEN-LAST:event_btnBack1ActionPerformed

    private void btnSave2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSave2ActionPerformed
   //Try catch is used to handle all exception while checking validation mainly date fields
        try
        {
            //declaring local variable
            String vitalHistoryStatus = "";
            String resprate = txtRespRate.getText().trim();
            String BP = txtBP.getText().trim();
            String heartRate = txtHeartRate.getText().trim();
            String weight = txtWeight.getText().trim();
            //declaring boolean variables for validation check
            boolean boolrr = Validate.isNumeric(resprate);
            boolean boolbp = Validate.isNumeric(BP);
            boolean boolhr = Validate.isNumeric(heartRate);
            boolean boolwt = Validate.isDouble(weight);
         //Checking if all vital fields are empty are not
            if(Validate.isEmpty(resprate) || Validate.isEmpty(BP) || Validate.isEmpty(heartRate) || Validate.isEmpty(weight))
            {
                JOptionPane.showMessageDialog(null,"Fields cannot be empty","Error",2);
                
            }  
            else
            {
                //Checking the validations like is number, double and also limiting user to enter weight greater then 1500
                if(boolrr && boolbp && boolhr && boolwt && Double.parseDouble(weight) <=1500)
                {
                    txtBP.setBackground(Color.WHITE);
                    txtHeartRate.setBackground(Color.WHITE);
                    txtRespRate.setBackground(Color.WHITE);
                    txtWeight.setBackground(Color.WHITE);
                    
                    
                    Date date = new Date();
                    //setting vitalsign history status as normal or abnormal based on the range check method defined in vitalhistory class
                    vitalHistoryStatus = CheckVitalHistoryStatus(patient.calculateAge(sdfdob.format(patient.getDOB())),Integer.parseInt(resprate),Integer.parseInt(heartRate),Integer.parseInt(BP),Double.parseDouble(weight));
                    //calling and setting value of vital object defined in vitalhistory
               

                    Vital vital = (Vital) patient.getVitalSignHistory().createVitals();
                    vital.setHeartRate(Integer.parseInt(heartRate));
                    vital.setSysBP(Integer.parseInt(BP));
                    vital.setWeight(Double.parseDouble(weight));
                    vital.setRespRate(Integer.parseInt(resprate));
                    vital.setCurrDate(date);
                    
                    vital.setVitalStatus(vitalHistoryStatus);
                    JOptionPane.showMessageDialog(null,"Vitals added Successfully","Success",1);
                    populateTable();
                    AddVitalPanel.setVisible(false);
                    VitalJPanel.setVisible(false);
                    txtBP.setText("");
                    txtHeartRate.setText("");
                    txtRespRate.setText("");
                    txtWeight.setText("");
                }
                else
                {
                     if(!boolbp)
                {
                    txtBP.setBackground(Color.red);
                 }
                else
                    txtBP.setBackground(Color.WHITE);
                  if(!boolhr)
                {
                    txtHeartRate.setBackground(Color.red);
                 }
                else
                    txtHeartRate.setBackground(Color.WHITE);
                   if(!boolrr)
                {
                    txtRespRate.setBackground(Color.red);
                 }
                else
                    txtRespRate.setBackground(Color.WHITE);
                   if(!boolwt)
                {
                    txtWeight.setBackground(Color.red);
                 }
                else
                    txtWeight.setBackground(Color.WHITE);
                    //if is number, double validation fails then invalid data message is displayed
                    JOptionPane.showMessageDialog(null,"Invalid data! Only Numeric Values allowed","Error",2);
                    //checking the weight range
                    if(Double.parseDouble(weight)> 1500)
                    {
                        JOptionPane.showMessageDialog(null,"Invalid data! Weight cannot be greater than 1500 pounds","Error",2);
                    }
                    
                }
            }
        }
        catch(Exception e)
        {
            //Catching exception
            System.out.println(e.toString());
        }
    }//GEN-LAST:event_btnSave2ActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        //Date date = new Date();
        btnUpdate.setEnabled(false);
        btnSave.setEnabled(true);
        //btnSave2.setEnabled(true);
        txtBP.setEnabled(true);
        txtHeartRate.setEnabled(true);
        txtWeight.setEnabled(true);
        txtRespRate.setEnabled(true);
       // txtTime.setText(sdf.format(date));
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
      //Try catch is used to handle all exception while checking validation mainly date fields
        try
        {
            int selectedrow = tblVitalHistory.getSelectedRow();
            
            Vital vital = (Vital)tblVitalHistory.getValueAt(selectedrow, 1);
            //declaring local variable
            String vitalHistoryStatus = "";
            String resprate = txtRespRate.getText().trim();
            String BP = txtBP.getText().trim();
            String heartRate = txtHeartRate.getText().trim();
            String weight = txtWeight.getText().trim();
            //declaring boolean variables for validation check
            boolean boolrr = Validate.isNumeric(resprate);
            boolean boolbp = Validate.isNumeric(BP);
            boolean boolhr = Validate.isNumeric(heartRate);
            boolean boolwt = Validate.isDouble(weight);
         //Checking if all vital fields are empty are not
            if(Validate.isEmpty(resprate) || Validate.isEmpty(BP) || Validate.isEmpty(heartRate) || Validate.isEmpty(weight))
            {
                JOptionPane.showMessageDialog(null,"Fields cannot be empty","Error",2);
                
            }  
            else
            {
                //Checking the validations like is number, double and also limiting user to enter weight greater then 1500
                if(boolrr && boolbp && boolhr && boolwt && Double.parseDouble(weight) <=1500)
                {
                    txtBP.setBackground(Color.WHITE);
                    txtHeartRate.setBackground(Color.WHITE);
                    txtRespRate.setBackground(Color.WHITE);
                    txtWeight.setBackground(Color.WHITE);
                    
                    
                    Date date = new Date();
                    //setting vitalsign history status as normal or abnormal based on the range check method defined in vitalhistory class
                    vitalHistoryStatus = CheckVitalHistoryStatus(patient.calculateAge(sdfdob.format(patient.getDOB())),Integer.parseInt(resprate),Integer.parseInt(heartRate),Integer.parseInt(BP),Double.parseDouble(weight));
                    //calling and setting value of vital object defined in vitalhistory
               

                    
                    vital.setHeartRate(Integer.parseInt(heartRate));
                    vital.setSysBP(Integer.parseInt(BP));
                    vital.setWeight(Double.parseDouble(weight));
                    vital.setRespRate(Integer.parseInt(resprate));
                    vital.setCurrDate(date);
                    
                    vital.setVitalStatus(vitalHistoryStatus);
                    JOptionPane.showMessageDialog(null,"Vitals updated Successfully","Success",1);
                    populateTable();
                    AddVitalPanel.setVisible(false);
                    VitalJPanel.setVisible(false);
                    txtBP.setText("");
                    txtHeartRate.setText("");
                    txtRespRate.setText("");
                    txtWeight.setText("");
                }
                else
                {
                     if(!boolbp)
                {
                    txtBP.setBackground(Color.red);
                 }
                else
                    txtBP.setBackground(Color.WHITE);
                  if(!boolhr)
                {
                    txtHeartRate.setBackground(Color.red);
                 }
                else
                    txtHeartRate.setBackground(Color.WHITE);
                   if(!boolrr)
                {
                    txtRespRate.setBackground(Color.red);
                 }
                else
                    txtRespRate.setBackground(Color.WHITE);
                   if(!boolwt)
                {
                    txtWeight.setBackground(Color.red);
                 }
                else
                    txtWeight.setBackground(Color.WHITE);
                    //if is number, double validation fails then invalid data message is displayed
                    JOptionPane.showMessageDialog(null,"Invalid data! Only Numeric Values allowed","Error",2);
                    //checking the weight range
                    if(Double.parseDouble(weight)> 1500)
                    {
                        JOptionPane.showMessageDialog(null,"Invalid data! Weight cannot be greater than 1500 pounds","Error",2);
                    }
                    
                }
            }
        }
        catch(Exception e)
        {
            //Catching exception
            System.out.println(e.toString());
        }
 }
    
private String CheckVitalHistoryStatus(int age,int rr, int hr, int bp,Double wt)
{
            //method to return normal or abnormal status based on conditions checked for ranges
            if(Validate.checkRange(age, rr, hr, bp,wt))
            {
                return "Normal";
            }
            return "Abnormal";

    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddVitalPanel;
    private javax.swing.JPanel VitalJPanel;
    private javax.swing.JButton btnAddVitals;
    private javax.swing.JButton btnBack1;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSave2;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnViewReport;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddOrganization2;
    private javax.swing.JLabel lblBP;
    private javax.swing.JLabel lblHeartRate;
    private javax.swing.JLabel lblPounds;
    private javax.swing.JLabel lblRespRate;
    private javax.swing.JLabel lblVitalDetails;
    private javax.swing.JLabel lblWeight;
    private javax.swing.JTable tblVitalHistory;
    private javax.swing.JTextField txtBP;
    private javax.swing.JTextField txtHeartRate;
    private javax.swing.JTextField txtRespRate;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables
}
